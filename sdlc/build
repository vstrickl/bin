#!/bin/bash

# Set Colors and handle errors
source ~/bin/colors

# Load environment variables from the project-specific .env file
if [ -f "${PWD}/.env" ]; then
    export $(grep -v '^#' "${PWD}/.env" | xargs)
else
    echo -e "${RED}Error: .env file not found in the current project directory (${PWD}). Exiting...${NC}"
    exit 1
fi

if [ -z "$DOCKER_USERNAME" ]; then
    handle_error "Error: DOCKER_USERNAME is not set. Please ensure it's defined in your .env file or as an environment variable."
fi

if [ -z "$DOCKER_ACCESS_TOKEN" ]; then
    handle_error "Error: DOCKER_ACCESS_TOKEN is not set. Please ensure it's defined in your .env file or as an environment variable."
fi

# Validate Docker credentials
echo -e "${YELLOW}Validating Docker access token...${NC}"
echo "${DOCKER_ACCESS_TOKEN}" | docker login -u ${DOCKER_USERNAME} --password-stdin
if [ $? -ne 0 ]; then
    echo -e "${RED}Docker login failed. Please check your DOCKER_ACCESS_TOKEN. Exiting...${NC}"
    exit 1
fi

echo -e "${GREEN}Docker login successful!${NC}"
echo -e " "

# Build Docker image
echo -e "${YELLOW}Building Docker images...${NC}"

# Optionally skip building the DB image if using the default postgres image
if docker compose config | grep -q "build: "; then
    echo -e "${YELLOW}Building Database image...${NC}"
    docker compose build db
    if [ $? -ne 0 ]; then
        echo -e "${RED}Docker database image build failed. Exiting...${NC}"
        echo -e " "
        exit 1
    fi
else
    echo -e "${YELLOW}Database image does not require building (using standard postgres:13 image).${NC}"
fi

# Build Web Image
echo -e "${YELLOW}Building Web image...${NC}"
docker compose build web
if [ $? -ne 0 ]; then
    echo -e "${RED}Docker web image build failed. Exiting...${NC}"
    echo -e " "
    exit 1
fi

# Build CI/CD Image
echo -e "${YELLOW}Building CI/CD image...${NC}"
docker compose build check_code
if [ $? -ne 0 ]; then
    echo -e "${RED}Docker CI/CD image build failed. Exiting...${NC}"
    echo -e " "
    exit 1
fi

echo -e " "
echo -e "${GREEN}Successfully built Docker images!${NC}"
echo -e " "