#!/bin/bash

# Set Colors and handle errors
source ~/bin/colors

# Check if the script is running on GitHub Actions
echo -e "${YELLOW}Checking Environment...${NC}"
if [ -n "$GITHUB_ACTIONS" ]; then
    echo -e "${YELLOW}Running on GitHub Actions, using GitHub environment variables...${NC}"
else
    # Load environment variables from the project-specific .env file if it exists
    if [ -f "${PWD}/.env" ]; then
        echo -e "${YELLOW}Loading environment variables from .env file...${NC}"
        export $(grep -v '^#' "${PWD}/.env" | xargs)
    else
        echo -e "${RED}Error: .env file not found in the current project directory (${PWD}). Exiting...${NC}"
        exit 1
    fi
fi

# Checking envars
echo -e "${YELLOW}Looking for Envars...${NC}"
if [ -z "$DOCKER_USERNAME" ]; then
    handle_error "Error: DOCKER_USERNAME is not set. Please ensure it's defined in your .env file or as an environment variable."
fi

if [ -z "$DOCKER_ACCESS_TOKEN" ]; then
    handle_error "Error: DOCKER_ACCESS_TOKEN is not set. Please ensure it's defined in your .env file or as an environment variable."
fi

# Validate Docker credentials
echo -e "${YELLOW}Validating Docker access token...${NC}"
echo "${DOCKER_ACCESS_TOKEN}" | docker login -u ${DOCKER_USERNAME} --password-stdin
if [ $? -ne 0 ]; then
    echo -e "${RED}Docker login failed. Please check your DOCKER_ACCESS_TOKEN. Exiting...${NC}"
    exit 1
fi

echo -e "${GREEN}Docker login successful!${NC}"
echo -e " "

# Optionally skip building the DB image if using the default postgres image
echo -e "${YELLOW}Checking if need to building Database image...${NC}"
if docker compose config | grep -q "build: "; then
    echo -e "${YELLOW}Building Database image...${NC}"
    docker compose build db
    if [ $? -ne 0 ]; then
        echo -e "${RED}Docker database image build failed. Exiting...${NC}"
        echo -e " "
        exit 1
    fi
else
    echo -e "${YELLOW}Database image does not require building (using standard postgres:13 image).${NC}"
    echo -e " "
fi
