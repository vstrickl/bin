#!/bin/bash

# Set Colors and handle errors
source ~/bin/colors

# Stop any running containers using port 8000 (optional)
echo -e " "
echo -e "${YELLOW}Stopping containers using Port 8000...${NC}"
echo -e " "

# Capture the output of the docker stop command
stopped_containers=$(docker ps -q --filter "ancestor=web")

if [ -n "$stopped_containers" ]; then
    docker stop $stopped_containers
    if [ $? -ne 0 ]; then
        echo -e "${RED}Failed to stop running containers using port 8000. Exiting...${NC}"
        exit 1
    else
        echo -e "${GREEN}Successfully stopped containers using port 8000.${NC}"
    fi
else
    echo -e "${GREEN}No containers found using port 8000. Skipping stop step.${NC}"
fi

# Start Process
echo -e " "
echo -e "${YELLOW}Building project...${NC}"
echo -e " "

# Update Django Environment
bash ~/bin/django/update_env
if [ $? -ne 0 ]; then
    handle_error "Django Environment Update failed. Exiting..."
fi

# Build Docker image
bash ~/bin/sdlc/build
if [ $? -ne 0 ]; then
    handle_error "Build script failed. Exiting..."
fi

# Run Docker image Locally
echo -e "${YELLOW}Running Docker image Locally...${NC}"
docker compose up local_web --remove-orphans 
if [ $? -ne 0 ]; then
    echo -e "${RED}Creating Docker container failed. Exiting...${NC}"
    echo -e " "
    exit 1
fi

echo -e "${GREEN}Docker container created successfully!${NC}"
echo -e " "